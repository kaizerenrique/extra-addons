# -*- coding: utf-8 -*-

from odoo import fields, models, api
import json
import re
from csv import DictReader
import os

import logging
_logger = logging.getLogger(__name__)

#Constantes de nombres internos de formas de pago spooler
SP_EFECTIVO = 'efectivo'
SP_EFECTIVO_USD = 'efectivo_usd'
SP_EFECTIVO_EURO = 'efectivo_euro'
SP_BANCO = 'cheques'
SP_TARJETA_DEBITO = 'tarj_debito'
SP_TARJETA_CREDITO = 'tarj_credito'
SP_TRANSFERENCIA_BS = 'trans_bs'
SP_TRANSFERENCIA_USD = 'trans_usd'
SP_TRANSFERENCIA_EURO = 'trans_euro'
SP_ZELLE = 'zelle'
SP_PAGO_MOVIL = 'pago_movil'
SP_CREDITO = 'credito'

def extraer_documento(invoi):
    if invoi.move_type != 'out_invoice' and invoi.move_type != 'out_refund':
        dfc = {}
    else:
        #pos = 0
        ditems = {}
        descuento = 0.0

        #Obtiene los items de la factura (lines)
        ditems, descuento = extraer_items(invoi)
        '''
        for item_fact in invoi.invoice_line_ids:
            ditems[pos] = {
                'descripcion': item_fact.product_id.description_sale if item_fact.product_id.description_sale else item_fact.product_id.name, 
                'codigoprod': item_fact.product_id.product_tmpl_id.id,
                'cantidad': item_fact.quantity, 
                'iva': item_fact.tax_ids[0].amount if item_fact.tax_ids else 0.0, 
                'precio':  item_fact.price_subtotal/item_fact.quantity if item_fact.quantity != 0 else 0.0, 
                'descuento': item_fact.discount }

            #Asegura que si la cantidad es cero(0.0), el renglon completo tenga todo en cero. Remueve calculos erroneos
            if (ditems[pos]['cantidad'] == 0.0):
                ditems[pos]['descuento'] = ditems[pos]['iva'] = ditems[pos]['precio'] = 0.0

            descuento = descuento + item_fact.discount * (item_fact.price_unit * item_fact.quantity)/100
            pos += 1
        '''

        '''
        cont = 0
        pitems = {}

        #Obtiene los items de pagos. Considera el origen y tipo de documento: desde POS o Facturacion, Factura o NC
        if (invoi.move_type == 'out_invoice' or invoi.move_type == 'out_refund'):
            if (len(invoi.pos_order_ids) > 0) and (invoi.move_type != 'out_refund'):   #Factura originada en el POS no-devolucion
                for item_pago in invoi.pos_order_ids[0].payment_ids:
                    clave = item_pago.payment_method_id.display_name
                    if clave in pitems:
                        pitems[clave]["monto"] += item_pago.amount
                    else:
                        pitems[clave] = {'monto': item_pago.amount }
            elif (invoi.move_type != 'out_refund') and invoi.invoice_payments_widget: #Factura originada por backend/Facturacion
                if type (invoi.invoice_payments_widget) is dict:
                    midata = invoi.invoice_payments_widget
                else:
                    midata = json.loads(invoi.invoice_payments_widget)

                if midata:
                    for item_pago in midata['content']:
                        pitems[item_pago["journal_name"]] = {'monto': item_pago["amount"] }
        '''
        pitems = extraer_pagos(invoi)

        #Obtiene el documento para casos de devoluciones/NC
        if invoi.move_type == 'out_refund':
            if invoi.reversed_entry_id.name:
                referencia = invoi.reversed_entry_id.name
            else:
                refs = invoi.env['account.move'].search([('ref', '=', invoi.ref.replace("REEMBOLSO", "")), ('move_type', '=', 'out_invoice')], limit=1)
                referencia = refs.name if refs.name else ""
        else:
            referencia = ""

        #Elimina caracteres especiales del numero de factura y solo toma los digitos finales
        #Es posible que se repitan numeros el siguiente año. Puede resolverse concatenando año + numero
        numerosf = re.findall(r'\d+', invoi.name )
        numfactura = numerosf[len( numerosf ) -1 ]

        if referencia != "":
            ref_tmp = re.findall(r'\d+', referencia )
            referencia = ref_tmp[len( ref_tmp ) -1 ]

        '''
        archfp = os.path.dirname(__file__) + "/" + "fxpagos.csv"
        if os.path.exists(archfp):
            with open(archfp, 'r') as f:
                dict_fpx = DictReader(f)
                list_fpx = list(dict_fpx)
        else:
            list_fpx = [{'fp_spool': 'efectivo', 'fp_odoo': 'Efectivo'}, {'fp_spool': 'efectivo', 'fp_odoo': 'Efectivo Bs'}, {'fp_spool': 'cheques', 'fp_odoo': 'Banco'}, {'fp_spool': 'tarj_debito', 'fp_odoo': 'Tarjeta de debito'}, {'fp_spool': 'tarj_credito', 'fp_odoo': 'Tarjeta de credito'}, {'fp_spool': 'trans_bs', 'fp_odoo': 'Tranferencia en Bs'}, {'fp_spool': 'trans_usd', 'fp_odoo': 'Transferencia en USD'}, {'fp_spool': 'trans_euro', 'fp_odoo': 'Transferencia en EURO'}, {'fp_spool': 'efectivo_usd', 'fp_odoo': 'Efectivo USD'}, {'fp_spool': 'efectivo_euro', 'fp_odoo': 'Efectivo USD'}, {'fp_spool': 'pago_movil', 'fp_odoo': 'Pago Movil'}, {'fp_spool': 'credito', 'fp_odoo': 'Credito'}, {'fp_spool': 'zelle', 'fp_odoo': 'Zelle'}]
        '''
        list_fpx = cargar_formas_pago()

        _logger.info("(Spooler)-----------  fpago  -----------------" )
        _logger.info( pitems )
        _logger.info("(Spooler)-----------  fpago  -----------------" )

        #Establece los montos de cada una de las formas de pago
        '''
        mt_efectivo = mt_banco = mt_tdebito = mt_tcredito = mt_trans_bs = mt_trans_usd = mt_zelle = mt_trans_euro = mt_efectivo_usd = mt_efectivo_euro = mt_pago_movil = mt_credito = {'monto': 0.0}

        for fpago in pitems:
            res = next((sub for sub in list_fpx if sub['fp_odoo'] == fpago), None)
           
            if res["fp_spool"] == SP_EFECTIVO:
                mt_efectivo = pitems.get( res["fp_odoo"] )
            elif res["fp_spool"] == SP_BANCO:
                mt_banco = pitems.get( res["fp_odoo"] )
            elif res["fp_spool"] == SP_TARJETA_DEBITO:
                mt_tdebito = pitems.get( res["fp_odoo"] )
            elif res["fp_spool"] == SP_TARJETA_CREDITO:
                mt_tcredito = pitems.get( res["fp_odoo"] )
            elif res["fp_spool"] == SP_TRANSFERENCIA_BS:
                mt_trans_bs = pitems.get( res["fp_odoo"] )
            elif res["fp_spool"] == SP_TRANSFERENCIA_USD:
                mt_trans_usd = pitems.get( res["fp_odoo"] )
            elif res["fp_spool"] == SP_ZELLE:
                mt_zelle = pitems.get( res["fp_odoo"] )
            elif res["fp_spool"] == SP_TRANSFERENCIA_EURO:
                mt_trans_euro = pitems.get( res["fp_odoo"] )
            elif res["fp_spool"] == SP_EFECTIVO_USD:
                mt_efectivo_usd = pitems.get( res["fp_odoo"] )
            elif res["fp_spool"] == SP_EFECTIVO_EURO:
                mt_efectivo_euro = pitems.get( res["fp_odoo"] )
            elif res["fp_spool"] == SP_PAGO_MOVIL:
                mt_pago_movil = pitems.get( res["fp_odoo"] )
            elif res["fp_spool"] == SP_CREDITO:
                mt_credito = pitems.get( res["fp_odoo"] )
        '''
        mt_efectivo, mt_banco, mt_tdebito, mt_tcredito, mt_trans_bs, mt_trans_usd, mt_zelle, mt_trans_euro, mt_efectivo_usd, mt_efectivo_euro, mt_pago_movil, mt_credito = obtener_montos_fp(pitems, list_fpx)

        dfc = {}
        dfc = {
        'tipodoc': 'fac' if invoi.move_type == 'out_invoice' else 'nc' if invoi.move_type == 'out_refund' else '*',
        'numero': numfactura,
        'fecha': invoi.date.strftime("%d/%m/%Y"),
        'cliente': str(invoi.partner_id.name),
        'rif':  str(invoi.partner_id.vat) if invoi.partner_id.vat else "",
        'dir1': str(invoi.partner_id.street) if invoi.partner_id.street else "",
        'dir2': str(invoi.partner_id.street2) if invoi.partner_id.street2 else "",
        'telefono': str(invoi.partner_id.phone) if invoi.partner_id.phone else "",
        'productos': ditems,
        'pagos': pitems,
        'efectivo': mt_efectivo,
        'banco': mt_banco,
        'tarj_debito': mt_tdebito, 
        'tarj_credito': mt_tcredito,
        'trans_bs': mt_trans_bs,
        'zelle': mt_zelle,
        'trans_euro': mt_trans_euro,
        'efectivo_usd': mt_efectivo_usd,
        'efectivo_euro': mt_trans_euro,
        'pago_movil': mt_pago_movil,
        'credito':  mt_credito,
        'sub_total': invoi.amount_untaxed,
        'porc_descuento': 0.0,
        'total_pagar': invoi.amount_total,
        'factura_afectada': referencia
        }

        if (invoi.move_type == 'out_refund'):
            dfc['banco'] = {'monto': invoi.amount_total}

    return dfc

def extraer_items(invoi):
    pos = 0
    ditems = {}
    descuento = 0.0
    for item_fact in invoi.invoice_line_ids:
        ditems[pos] = {
            'descripcion': item_fact.product_id.description_sale if item_fact.product_id.description_sale else item_fact.product_id.name, 
            'codigoprod': item_fact.product_id.product_tmpl_id.id,
            'cantidad': item_fact.quantity, 
            'iva': item_fact.tax_ids[0].amount if item_fact.tax_ids else 0.0, 
            'precio':  item_fact.price_subtotal/item_fact.quantity if item_fact.quantity != 0 else 0.0, 
            'descuento': item_fact.discount }

        #Asegura que si la cantidad es cero(0.0), el renglon completo tenga todo en cero. Remueve calculos erroneos
        if (ditems[pos]['cantidad'] == 0.0):
            ditems[pos]['descuento'] = ditems[pos]['iva'] = ditems[pos]['precio'] = 0.0

        descuento = descuento + item_fact.discount * (item_fact.price_unit * item_fact.quantity)/100
        pos += 1

    return ditems, descuento

def extraer_pagos(invoi):
    pitems = {}

    #Obtiene los items de pagos. Considera el origen y tipo de documento: desde POS o Facturacion, Factura o NC
    if (invoi.move_type == 'out_invoice' or invoi.move_type == 'out_refund'):
        if (len(invoi.pos_order_ids) > 0) and (invoi.move_type != 'out_refund'):   #Factura originada en el POS no-devolucion
            for item_pago in invoi.pos_order_ids[0].payment_ids:
                clave = item_pago.payment_method_id.display_name
                if clave in pitems:
                    pitems[clave]["monto"] += item_pago.amount
                else:
                    pitems[clave] = {'monto': item_pago.amount }
        elif (invoi.move_type != 'out_refund') and invoi.invoice_payments_widget: #Factura originada por backend/Facturacion
            if type (invoi.invoice_payments_widget) is dict:
                midata = invoi.invoice_payments_widget
            else:
                midata = json.loads(invoi.invoice_payments_widget)

            if midata:
                for item_pago in midata['content']:
                    pitems[item_pago["journal_name"]] = {'monto': item_pago["amount"] }

    return pitems


def cargar_formas_pago():
    archfp = os.path.dirname(__file__) + "/" + "fxpagos.csv"
    if os.path.exists(archfp):
        with open(archfp, 'r') as f:
            dict_fpx = DictReader(f)
            list_fpx = list(dict_fpx)
    else:
        list_fpx = [{'fp_spool': 'efectivo', 'fp_odoo': 'Efectivo'}, {'fp_spool': 'efectivo', 'fp_odoo': 'Efectivo Bs'}, {'fp_spool': 'cheques', 'fp_odoo': 'Banco'}, {'fp_spool': 'tarj_debito', 'fp_odoo': 'Tarjeta de debito'}, {'fp_spool': 'tarj_credito', 'fp_odoo': 'Tarjeta de credito'}, {'fp_spool': 'trans_bs', 'fp_odoo': 'Tranferencia en Bs'}, {'fp_spool': 'trans_usd', 'fp_odoo': 'Transferencia en USD'}, {'fp_spool': 'trans_euro', 'fp_odoo': 'Transferencia en EURO'}, {'fp_spool': 'efectivo_usd', 'fp_odoo': 'Efectivo USD'}, {'fp_spool': 'efectivo_euro', 'fp_odoo': 'Efectivo USD'}, {'fp_spool': 'pago_movil', 'fp_odoo': 'Pago Movil'}, {'fp_spool': 'credito', 'fp_odoo': 'Credito'}, {'fp_spool': 'zelle', 'fp_odoo': 'Zelle'}]

    return list_fpx

def obtener_montos_fp(pitems, list_fpx):
    mt_efectivo = mt_banco = mt_tdebito = mt_tcredito = mt_trans_bs = mt_trans_usd = mt_zelle = mt_trans_euro = mt_efectivo_usd = mt_efectivo_euro = mt_pago_movil = mt_credito = {'monto': 0.0}

    for fpago in pitems:
        res = next((sub for sub in list_fpx if sub['fp_odoo'] == fpago), None)
       
        if res["fp_spool"] == SP_EFECTIVO:
            mt_efectivo = pitems.get( res["fp_odoo"] )
        elif res["fp_spool"] == SP_BANCO:
            mt_banco = pitems.get( res["fp_odoo"] )
        elif res["fp_spool"] == SP_TARJETA_DEBITO:
            mt_tdebito = pitems.get( res["fp_odoo"] )
        elif res["fp_spool"] == SP_TARJETA_CREDITO:
            mt_tcredito = pitems.get( res["fp_odoo"] )
        elif res["fp_spool"] == SP_TRANSFERENCIA_BS:
            mt_trans_bs = pitems.get( res["fp_odoo"] )
        elif res["fp_spool"] == SP_TRANSFERENCIA_USD:
            mt_trans_usd = pitems.get( res["fp_odoo"] )
        elif res["fp_spool"] == SP_ZELLE:
            mt_zelle = pitems.get( res["fp_odoo"] )
        elif res["fp_spool"] == SP_TRANSFERENCIA_EURO:
            mt_trans_euro = pitems.get( res["fp_odoo"] )
        elif res["fp_spool"] == SP_EFECTIVO_USD:
            mt_efectivo_usd = pitems.get( res["fp_odoo"] )
        elif res["fp_spool"] == SP_EFECTIVO_EURO:
            mt_efectivo_euro = pitems.get( res["fp_odoo"] )
        elif res["fp_spool"] == SP_PAGO_MOVIL:
            mt_pago_movil = pitems.get( res["fp_odoo"] )
        elif res["fp_spool"] == SP_CREDITO:
            mt_credito = pitems.get( res["fp_odoo"] )

    return mt_efectivo, mt_banco, mt_tdebito, mt_tcredito, mt_trans_bs, mt_trans_usd, mt_zelle, mt_trans_euro, mt_efectivo_usd, mt_efectivo_euro, mt_pago_movil, mt_credito
